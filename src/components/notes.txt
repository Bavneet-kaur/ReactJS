>> Fragments are only needed if you return multiple sibling elements

>>In React, a component is a reusable piece of UI. 
Think of it like a Lego brick—you can build complex UIs by stacking small, manageable pieces. ~profileCard 

>> Props (short for properties) let you pass data from a parent component to a child component.
Think of it like this:Your component 1(productCard) is a template. Props let you fill in the blanks dynamically. ~productCard

>>state is a way to store and manage data within a component. Unlike props (which are passed from parent to child), 
state is managed within a component and can change over time, causing the component to re-render when the state changes. 
State updates are asynchronous, meaning React doesn’t immediately apply the changes but schedules them for later. 
This is why you should not rely on the immediate value of the state after calling setState. ~counter

>>Event handling in React refers to how React components react to and manage user interactions, such as clicks, form submissions, 
and mouse movements. It's a crucial aspect of building interactive and dynamic user interfaces. React implements a synthetic 
event system, which provides consistent behavior across different browsers. ~likes

>>passing the function to the child component ~ child

>>handling form ~form

>>list[array] & Keys should be unique within the array. It can be any unique identifier.
Don’t use array index as key when items can change dynamically (for performance reasons).
When you change the order of list items, React uses keys to re-render only the affected items, which saves time. ~Users, Todo

>>conditional rendering ~loginToggle

>>React routing ~pages, routing

>>lifting state up - share state between components by lifting it up to their common parent.
If two sibling components need to access or modify the same state, you move that state up into their 
common ancestor component, and pass it down via props. ~input, display, parent

>>React Context API is a feature that allows sharing data between components without explicitly passing props through each 
level of the component tree. It offers a way to create "global" variables accessible by any component within the application. 
It is especially useful for managing states and avoiding "prop drilling," where props are passed down multiple levels of components. 

The Context API revolves around three main parts:
1. createContext: This function creates a context object. It can accept a default value, which is used if a component attempts to access 
the context without a matching provider.
2.Provider: This component makes the context value available to all its descendant components. It takes a value prop, which represents the 
data to be shared.
3.useContext: This hook consumes the context value within a functional component. It takes the context object as an argument and 
returns the current context value. ~theme,themeToggle

>>Hooks allow function components to have access to state and other React features. Because of this, class components are generally no 
longer needed.

There are 3 rules for hooks:
1.Hooks can only be called inside React function components.
2.Hooks can only be called at the top level of a component.
3.Hooks cannot be conditional

>>The useEffect Hook allows you to perform side effects in your components.
Some examples of side effects are: fetching data, directly updating the DOM, and timers.
useEffect accepts two arguments. The second argument is optional.
useEffect(<function>, <dependency>)
The second argument (empty array [] here) defines dependencies. 
If it’s empty, useEffect runs only once (similar to componentDidMount in class components).
If you want it to run whenever a specific variable changes, you can pass that variable(state & props) inside the array
Some effects require cleanup to reduce memory leaks.
Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.
We do this by including a return function at the end of the useEffect Hook. ~effect

>>React Context is a way to manage state globally.It can be used together with the useState Hook to share state between deeply 
nested components more easily than with useState alone. State should be held by the highest parent component in the stack that
requires access to the state.
To illustrate, we have many nested components. The component at the top and bottom of the stack need access to the state.
To do this without Context, we will need to pass the state as "props" through each nested component. This is called "prop drilling". ~themeToggle

