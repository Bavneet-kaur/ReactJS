>>Redux is a state management library for JavaScript apps (commonly used with React).
It provides a centralized store for all your application state, making it predictable and easier to debug â€” 
especially when many components need to share or modify the same state.

In simple words: ðŸ‘‰ Instead of managing state individually in components, you store it in a global store.
ðŸ‘‰ Components can then read from the store and dispatch actions to modify it.

>>A single object that holds the entire application state.
Created using createStore() (in older Redux) or configureStore() (in Redux Toolkit).

>>Plain JavaScript objects that describe what happened.
They must have a type property.
Can also carry additional data (called payload).

>>Pure functions that take the current state and an action, and return a new state.
The only way to update state in Redux is by dispatching actions handled by reducers.

>>A function to send actions to the store.
When you call dispatch(action), Redux sends that action to the reducer to update the state.

>>Functions used to get specific parts of the state from the store.
Helps keep your components clean and organized.

>>Functions that can intercept actions before they reach the reducer.
Commonly used for async operations (like API calls) using redux-thunk or redux-saga